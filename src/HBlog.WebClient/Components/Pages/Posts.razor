@page "/posts"
@using HBlog.Domain.Entities
@using HBlog.WebClient.Services
@using HBlog.WebClient.States
@inject ICategoryService categoryService
@inject IPostService postService;
@inject ITagService tagService;
@inject PostDashboardState PostDashboardState;
<div class="container-xxl py-2 d-flex">
    <div class="col-xl-3" >
        <div>
            <label>Category</label>
            <select @onchange="HandleChangeCategory">
                <option value="0">Select All</option>
                @foreach (var category in Categories)
                {
                    <option value="@category.Id">@category.Title</option>
                }
            </select>
            <br>

            <div>
                <button @onclick="@(() => PostDashboardState.ShowConfigureTagSelectDialog())" style="margin: 0.5ch;">Tag Filters</button>
            </div>
            @if (PostDashboardState.SearchTags is not null)
            {
                @foreach (TagDto tag in PostDashboardState.SearchTags)
                {
                    <button>@tag.Name</button>
                }
            }
            <div>
                <button type="submit" class="btn btn-success ml-auto" @onclick="SearchSelectedSetup" >Search</button>
            </div>
        </div>
    </div>

    <div class="h-100 d-flex flex-column justify-content-center">
        @if (posts is not null)
        {
            <PostList Posts=@posts></PostList>
        }
        else
        {
            <h4>Loading data...</h4>
        }
    </div>
</div>

<TemplateDialog Show="PostDashboardState.ShowingConfigureDialog">
    <ConfigureTagDialog SearchTags="PostDashboardState.SearchTags"
        OnCancel="PostDashboardState.CancelConfigureTagDialog"
        OnConfirm="PostDashboardState.ConfirmConfigureTagDialog" />
</TemplateDialog>
@code {

    private IEnumerable<Category> Categories { get; set; } = new List<Category>();
    private List<TagDto>? tags = new();
    private int? selectCategoryId = 0;
    private IEnumerable<PostDisplayDto> posts;

    protected override async Task OnInitializedAsync()
    {
        Categories = await categoryService.GetCategories();
        posts = await postService.GetPostDisplays();
        tags = (await tagService.GetTags()).ToList();
    }
    protected override Task OnParametersSetAsync()
    {
        return base.OnParametersSetAsync();
    }
    protected async Task SearchSelectedSetup(MouseEventArgs e) {
        posts = await postService.GetPostDisplayByFilters(selectCategoryId.Value, PostDashboardState.SearchTags);
    }

    private async Task HandleChangeCategory(ChangeEventArgs e)
    {
        int num = int.Parse((string?)e.Value);
        if(num == 0)
        {
            posts = await postService.GetPostDisplays();
            return;
        }
        posts = await postService.GetPostDisplayByFilters(num, PostDashboardState.SearchTags);
    }



}
