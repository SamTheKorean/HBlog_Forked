@page "/posts/{PostId:int?}"
@using HBlog.WebClient.Services
@inject IPostService _postService;
@inject ITagService _tagService;
@inject NavigationManager navManager;
@inject MarkdownService MarkdownService

@if (_postdetailsView is not null)
{
    @if (isButtonsVisible)
    {
        <button class="btn btn-dark" @onclick="@(()=>navManager.NavigateTo($"/posts/edit/{_postdetailsView.Id}"))">Edit</button>
        @* <button class="btn btn-light" @onclick="() => ConfigureTagDialog()">Add Tag</button> *@
        <button class="btn btn-danger" @onclick="() => ConfirmDeleteCategory(_postdetailsView.Id)">Delete</button>
        <ConfirmationModal Title="Confirm Delete" Message="Do you want to delete this blog post?" IsVisible="@_showDeleteConfirmationModal" ConfirmationChanged="OnModalConfirm" />
    }
    <div class="m-2 m-sm-3">
        <div class="mb-3 d-flex card p-2">
            <h2 class="font-weight-bold bg-body-secondary p-3">
                @_postdetailsView.Title
            </h2>
            <Entry>@((MarkupString)htmlContent)</Entry>


            <div class="border-top border-3">
                <small class="text-muted small">@_postdetailsView.Created.ToString("MMM dd yyyy")</small>

            </div>
           
        </div>
        @if (_postdetailsView.Tags is not null)
        {
            @foreach (var tag in _postdetailsView.Tags)
            {
                <button>@tag.Name</button>
            }
        }
    </div>
   

}
else
{
    <p>Loading data...</p>
}



@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    [Parameter]
    public int? PostId { get; set; }

    private PostDisplayDetailsDto _postdetailsView = new PostDisplayDetailsDto();


    private string htmlContent = string.Empty;
    private bool isButtonsVisible = false;
    private bool _showDeleteConfirmationModal = false;


    protected override async Task OnInitializedAsync()
    {
        var result = await _postService.GetPostDetails(PostId!.Value);
        if (result is null)
        {
            navManager.NavigateTo("/", replace: true);
            return;
        }
        _postdetailsView = result;
        htmlContent = MarkdownService.RenderMarkdown(_postdetailsView.Content);

        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState.User;
            var userName = user.FindFirst(u => u.Type.Contains("unique_name"))?.Value;
            if (user.Identity!.IsAuthenticated && userName == _postdetailsView.UserName)
                isButtonsVisible = true;
        }
    }
    private async Task OnModalConfirm(bool isConfirmed)
    {
        _showDeleteConfirmationModal = false;
        if (isConfirmed)
        {
            if (_postdetailsView != null)
            {
                await _postService.DeletePost(PostId!.Value);
                navManager.NavigateTo("/posts");
            }
        }
    }
    private void ConfirmDeleteCategory(int id)
    {
        _showDeleteConfirmationModal = true;
    }
}
