@page "/posts/create"
@inject IPostService postService
@inject ICategoryService categoryService
@inject NavigationManager navManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@using HBlog.Domain.Entities
@using HBlog.WebClient.Providers
@using HBlog.WebClient.Services
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]
<div class="container-xxl py-4">
    <h3>Create new post</h3>
    <div class="card-body">
        <EditForm Model="newPostDto" OnValidSubmit="CreateNewPost">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="title">Post Title</label>
                <InputText class="form-control" @bind-Value="newPostDto.Title" />
            </div>
            <div class="form-group">
                <label for="description">Description</label>
                <InputText class="form-control" @bind-Value="newPostDto.Desc" />
            </div>
            <div class="form-group">
                <label for="description">Category</label>
                <InputSelect class="select-element" @bind-Value="newPostDto.CategoryId">
                    @foreach (var category in Categories)
                    {
                        <option value="@category.Id">@category.Title</option>
                    }
                </InputSelect>
            </div>
            <div class="form-group">
                <label for="type">Post Type</label>
                <InputText class="form-control" @bind-Value="newPostDto.Type" />
            </div>
            <div class="form-group">
                <label for="Content">Content</label>
                <InputTextArea class="form-control" @bind-Value="newPostDto.Content" />
            </div>

            <button type="submit" class="btn btn-primary btn-block">Create</button>
        </EditForm>
    </div>
</div>



@code {
    PostCreateDto newPostDto = new PostCreateDto();
    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; }

    public System.Security.Claims.ClaimsPrincipal CurrentUser { get; set; }

    private IEnumerable<Category> Categories { get; set; } = new List<Category>();
    protected override async Task OnInitializedAsync()
    {
        Categories = await categoryService.GetCategories();
    }

    private async Task CreateNewPost()
    {
        var id = newPostDto.CategoryId;
        var authState = await AuthState;
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            var result = await postService.CreatePost(newPostDto);
            if (result)
                navManager.NavigateTo("/posts");

        }
    }
}
