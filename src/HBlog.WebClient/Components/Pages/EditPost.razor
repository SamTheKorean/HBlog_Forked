@page "/posts/edit/{PostId:int?}"
@using HBlog.Domain.Entities
@using HBlog.WebClient.Services
@using Microsoft.AspNetCore.Authorization
@inject IPostService postService
@inject ICategoryService categoryService
@inject ITagService tagService
@inject NavigationManager navManager
@inject AuthenticationStateProvider AuthenticationStateProvider

@attribute [Authorize]
<div class="container-xxl py-5">
    <h3>Edit Post</h3>
    <div class="card-body">
        <EditForm Model="postView" OnValidSubmit="UpdatePost">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="title">Post Title</label>
                <InputText class="form-control" @bind-Value="postView.Title" />
            </div>
            <div class="form-group">
                <label for="description">Description</label>
                <InputText class="form-control" @bind-Value="postView.Desc" />
            </div>

            <div class="form-group">
                <label for="description">Category</label>
                <InputSelect class="select-element" @bind-Value="postView.CategoryId">
                    @foreach (var category in Categories)
                    {
                        <option value="@category.Id">@category.Title</option>
                    }
                </InputSelect>
            </div>
            <div class="form-group">
                <label for="Content">Content</label>
                <InputTextArea class="form-control" @bind-Value="postView.Content" />
            </div>
            <br />
            <div class="form-group">

                <InputSelect class="form-select" style="width:200px"
                             ValueExpression="(() => newSelectedTag)"
                             Value="newSelectedTag"
                             ValueChanged="HandleAddingTag"
                             TValue="int?">
                    @foreach (var tag in tags)
                    {
                        <option value="@tag.TagId">@tag.Name</option>
                    }
                </InputSelect>
            </div>
            <br />
            <div>
                @if (editTags is not null)
                {
                    @foreach (var tag in editTags)
                    {
                        <button @onclick="@(() => RemoveTag(tag))">@tag.Name</button>
                    }
                }
            </div>


            <br />
            <br />
            <div class="form-group">
                <label for="Content">Visible to public</label>
                <InputCheckbox @bind-Value="isVisible" />
            </div>
            <br />
            <button type="submit" class="btn btn-primary btn-block">Update</button>
        </EditForm>
    </div>
</div>

@code {
    public PostDisplayDetailsDto postView { get; set; } = new();

    [Parameter]
    public int? PostId { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> AuthState { get; set; }

    private int? newSelectedTag { get; set; }
    private bool isVisible { get; set; }
    private IEnumerable<Category> Categories = new List<Category>();
    private IEnumerable<TagDto> tags = new List<TagDto>();
    private List<TagDto> editTags = new();

    protected override async Task OnInitializedAsync()
    {
        postView = await postService.GetPostDetails(PostId.Value);
        editTags = postView.Tags.ToList();
        Categories = await categoryService.GetCategories();
        tags = await tagService.GetTags();
    }

    private async Task UpdatePost()
    {
        var authState = await AuthState;
        if (authState.User.Identity.IsAuthenticated)
        {
            PostUpdateDto postUpdateDto = new PostUpdateDto
                {
                    Id = postView.Id,
                    Title = postView.Title,
                    Desc = postView.Desc,
                    Content = postView.Content,
                    Type = postView.Type,
                    CategoryId = postView.CategoryId,
                    LinkForPost = postView.LinkForPost ?? string.Empty,
                };
            var result = await postService.UpdatePost(postUpdateDto);
            if (result)
                navManager.NavigateTo($"/posts/{postUpdateDto.Id}");
        }

    }

    public async Task HandleAddingTag(int? tagId)
    {
        var tag = tags.First(t => t.TagId == tagId);
        if (editTags?.Find(t => t.TagId == tagId) is null)
        {           
            editTags?.Add(tag);
        }
        newSelectedTag = tagId;
    }
    private void RemoveTag(TagDto tag)
    {
        editTags?.RemoveAll(t => t == tag);
    }
}
